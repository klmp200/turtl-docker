;; Generated by confd {{datetime}}

(in-package :turtl)

(defparameter *root* (asdf:system-relative-pathname :turtl #P"")
  "Defines the root directory turtl is loading from (basically the ASDF path).")

(defparameter *pid-file* {{ getv "/turtl/pidfile" "nil" }}
  "File to write the current proc's PID to.")

(defvar *server-bind* {{ getv "/turtl/bindaddr" "nil" }}
  "The address to bind Turtl to (nil is the same as 0.0.0.0).")

(defvar *server-port* {{ getv "/turtl/bindport" "8181" }}
  "The port we want to start the Turtl service on.")

(defvar *db-name* "{{ getv "/turtl/dbname" "turtl" }}"
  "The name of the database we'll be using LOL")

(defvar *db-host* "{{ getv "/turtl/dbhost" "rethinkdb" }}"
  "The database hostname/ip.")

(defvar *db-port* {{ getv "/turtl/dbport" "28015" }}
  "The database port number.")

(defvar *production-error-handling* {{ getv "/turtl/debug" "nil" }}
  "If t, will attempt to catch all errors that make it to top-level and not let
   the parent process enter the debugger.")

(defvar *enable-hsts-header* {{ getv "/turtl/hsts/header/max/age" "nil" }}
  "If NIL, Turtl won't pass back an HSTS security header. If this is set, it
   should be set to a integer value, which will be passed to the max-age value
   of the header.")

(defvar *enabled-cors-resources* "{{ getv "/turtl/cors/resources" "resource://localhost" }}"
  "When set, will enable CORS for resource:// origins if they match the given
   string. Entries should be comma separated (this string is passed verbatim in
   the Access-Control-Allow-Origin header).")

(defvar *site-url* "{{ getv "/turtl/url" "http://localhost:8181" }}"
  "The main URL the site will load from.")

(defvar *api-path* "{{ getv "/turtl/api/path" " " }}"
  "The path the API lives under. Can be blank.")

(defvar *admin-email* "{{ getv "/turtl/email/admin" "me@example.com" }}"
  "The email used for admin communications. This is reported to users on a
   server error, and possibly other instances.")

(defvar *email-from* "{{ getv "/turtl/email/from" "noreply@example.com" }}"
  "The email address all turtl emails come from.")

(defvar *smtp-host* {{ getv "/turtl/email/smtp/server" "nil" }}
  "If you want to send mail with SMTP rather than sendgrid.com, set to a valid
   SMTP server (can be localhost)")
(defvar *email-user* "{{ getv "/turtl/email/smtp/user" " " }}"
  "The sendgrid username used for sending email. Needs to be set on load.")
(defvar *email-pass* "{{ getv "/turtl/email/smtp/password" " " }}"
  "The sendgrid password used for sending email. Needs to be set on load.")

(defvar *display-errors* {{ getv "/turtl/display/errors" "t" }}
  "Whether or not to show errors in HTTP responses. Useful for debugging, bad
   for production.")

(defparameter *public-actions*
  `((:post . ,(concatenate 'string *api-path* "/users"))
    (:post . ,(concatenate 'string *api-path* "/log/error"))
    (:post . "/cla/sign")
    (:get . ,(cl-ppcre:create-scanner (concatenate 'string *api-path* "/invites/codes/([0-9a-f-]+)"))))
  "A list of public resources/actions that do not require authentication.")

(defparameter *default-storage-limit* {{ getv "/turtl/storage/default-limit" "100" }}
  "The max amount of data a profile can hold (in megabytes). Set to nil to allow
   infinite size profiles.")

(defparameter *storage-invite-credit* {{ getv "/turtl/storage/invite-credit" "25" }}
  "The amount of storage (in mb) to credit a user when they refer someone.")

;; setup the logger
(vom:config :turtl :info)

(defvar *analytics* '(:enabled {{ getv "/turtl/analytics/enabled" "t" }}
                      :db "{{ getv "/turtl/analytics/dbname" "analytics" }}")
  "Holds analytics config")

;; -----------------------------------------------------------------------------
;; File storage section.
;; -----------------------------------------------------------------------------

;; Choose either local uploads or S3.

(defvar *local-upload* {{ getv "/turtl/upload/local-path" "nil" }}
  "NIL disables local files storage (files are uploaded to S3). Set to a local
   path to save files locally instead of remotely. No trailing slash!")
(defvar *local-upload-url* {{ getv "/turtl/upload/local-url" "nil" }}
  "Define the URL that local files will be loaded from. Generally, this will be
   the same URL the API is accessed from and only needs to be defined if the
   *local-upload* variable has a value. This should *not* include the /files
   path, and there should be no trailing slash. Example:

     http://turtl.dev:8181")

(defvar *amazon-s3* '(:token "{{ getv "/turtl/aws/s3/access/key" " " }}"
                      :secret "{{ getv "/turtl/aws/s3/secret/key" " " }}"
                      :bucket "{{ getv "/turtl/aws/s3/bucket/name" " " }}"
                      :endpoint "{{ getv "/turtl/aws/s3/endpoint" "https://s3.amazonaws.com" }}")
  "Holds Amazon S3 config.")
